#!/usr/bin/env bash
#--------------------------------------------
# Default Bash Script Header
set -eu
trap stacktrace EXIT
function stacktrace {
	if [ $? != 0 ]; then
		echo -e "\nThe command '$BASH_COMMAND' triggerd a stacktrace:"
		for i in $(seq 1 $((${#FUNCNAME[@]} - 2))); do j=$(($i+1)); echo -e "\t${BASH_SOURCE[$i]}: ${FUNCNAME[$i]}() called in ${BASH_SOURCE[$j]}:${BASH_LINENO[$i]}"; done
	fi
}
#--------------------------------------------

##  Check for Dependencies
if ! which sha1sum >/dev/null 2>&1 ; then
	echo -e "Please install sha1sum (coreutils)\n"
	trap '' EXIT
	exit 1
fi

# build time variables
prefix="@prefix@"
pkgdatadir="@datarootdir@/@PACKAGE@"
config="@PACKAGE@.conf"
sysconfig="@sysconfdir@/$config"
userconfig=${XDG_CONFIG_HOME:=~/.config}/"$config"
XDG_DATA_HOME=${XDG_DATA_HOME:=~/.local/share}

function colonValue {
	local field=$1
	local file=$2

	if ! [ -f "$file" ]; then
		return
	fi

	grep -e "^$field:" "$file" \
		| cut -d':' -f2- \
		| sed 's/\(^[[:space:]]\+\|[[:space:]]\+$\)//g'
}

function loadConfigValue {
	local field="$1"
	local defaultValue="$2"
	local systemConfig="$3"
	local userConfig="$4"

	# read from userconfig
	local value="$(colonValue "$field" "$userConfig")"
	if [ "$value" == "" ]; then
		value="$(colonValue "$field" "$systemConfig")"
	fi
	if [ "$value" == "" ]; then
		value="$defaultValue"
	fi
	echo "$value"
}

function loadConfigValueEvaluated {
	value="$(loadConfigValue "$@")"
	eval "echo $value" # to evaluate variables like: $XDG_DATA_HOME
}

# setup
if ! [ -f "$userconfig" ]; then
	# load system defaults
	directory="$(loadConfigValueEvaluated "directory" "$XDG_DATA_HOME/taskfocus" "$sysconfig" "$userconfig")"

	echo "It looks like you are running taskfocus for the first time. Starting setup:"
	read -e -p "Please enter where to store your task files: " -i "$directory" directory;
	echo "directory: $directory" > "$userconfig"
	echo "vimrc snippet:"
	cat "$pkgdatadir/templates/vimrc"
	echo "It is recommended to add the above snippet to your vimrc."
	read -p "Should we append it for you now? (y/n)" -n 1 -r
	echo # move to a new line
	if [[ $REPLY = "y" ]]; then
		echo "Adding snippet to ~/.vimrc"
		cat "$pkgdatadir/templates/vimrc" >> ~/.vimrc
	fi
fi

# load config values
directory="$(loadConfigValueEvaluated "directory" "$XDG_DATA_HOME/taskfocus" "$sysconfig" "$userconfig")"

mkdir -p "$directory"

# other variables
timestamp="$(date +%s)"
cycle="$((60*60*24))"
format="%Y-%m-%d"
last="$(date +$format -d @$(($timestamp + ($cycle*-1)))).md"
current="$(date +$format -d @$(($timestamp + ($cycle*0)))).md"
next="$(date +$format -d @$(($timestamp + ($cycle*1)))).md"
filename="$current"
template="$pkgdatadir/templates/task.md"

if [ $# -gt 0 ]; then
	if [ "$1" == "open" ]; then
		# sort only by the first column (seperated by space)
		grep -ri "\- \[ \]" "$directory" | sed -e 's;^[^:]*/;;' -e 's/.md:-/:/' | sort -s -k 1,1
		exit 0
	elif [ "$1" == "backlog" ]; then
		filename="backlog.md"
	elif [ "$1" == "last" ]; then
		filename="$last"
	elif [ "$1" == "current" ]; then
		filename="$current"
	elif [ "$1" == "next" ]; then
		filename="$next"
	elif [ -f "$directory/$1.md" ]; then
		filename="$1.md"
	elif ! [ -f "$directory/$1.md" ] && [ "${2:-}" == "-f" ]; then
		filename="$1.md"
	else
		echo -e "Task File '$1' does not exist.\n"
		echo -e "Usage: $0 [operation] [options]"
		echo -e "Operations:"
		echo -e "\tbacklog\topens the backlog"
		echo -e "\tlast\topens the file for the last cycle (e.g. yesterday)"
		echo -e "\tcurrent\topens the file for the current cycle (e.g. day)"
		echo -e "\tnext\topens the file for the last cycle (e.g. tomorrow)"
		echo -e "\t{date}\topens the file for a specific date (e.g. use '20180525' for the 25th May 2018)"
		echo -e ""
		echo -e "'current' is the default operation"
		echo -e ""
		echo -e "Options:"
		echo -e "\t-f\t to create non-existing files which are not part of the predefined operations (e.g. for future dates)"
		echo -e ""
		echo -e "For all operations which are not the 'current' one, the 'current' operation will be displayed next to it."
		exit 0
	fi
fi

function fileHash {
	local filePath="$1"
	sha1sum "$filePath" | cut -d" " -f1
}

# create file from template if it doesn't exist
# echos nothing if the file exists (important for removeUnused)
function createFileFromTemplate {
	local filePath="$1"
	# dont overwrite existing files
	if ! [ -f "$filePath" ]; then
		touch "$filePath"
		echo "# Tasks" >> "$filePath"
		cat "$template" >> "$filePath"
		echo "type ',task' to add more tasks" >> "$filePath"
		fileHash "$filePath"
	fi
}

function removeUnused {
	local filePath="$1"
	local templateHash="$2"
	local hashSum="$(fileHash "$filePath")"
	# if the file didn't exist and it wasn't modified, we remove it
	if [ -f "$filePath" ] && [ "$hashSum" != "" ] && [ "$hashSum" == "$templateHash" ]; then
		echo "Removing unmodified task file $filePath"
		rm "$filePath"
	fi
}

primary="$directory/$filename"
secondary="$directory/$current"

primaryTemplateHash="$(createFileFromTemplate "$primary")"
secondaryTemplateHash="$(createFileFromTemplate "$secondary")"

if [ "$primary" == "$secondary" ]; then
	vim "$primary"
else
	vim -O "$primary" "$secondary"
fi

removeUnused "$primary" "$primaryTemplateHash"
if [ "$primary" != "$secondary" ]; then
	removeUnused "$secondary" "$secondaryTemplateHash"
fi

